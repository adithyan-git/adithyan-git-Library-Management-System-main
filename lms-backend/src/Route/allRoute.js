const express = require("express");
const {deletePerson, updateMemberShip, addbook, editBook, deleteBook, viewAllBooks, viewBorrowedBooks, approveBorrowingRequest, approveReservedRequest, manageInventory, orderNewBooks, approveReturn, cancelReservation, sendMembershipExpiringNotification, sendReturnDateExpiringNotification, viewMostBorrowedBooks, viewMostReservedDemandedBook, viewUnusedBooks, viewTotalFineammount, addMissingBook, viewMissingBook, libraryTime, updateLibraryTime, addUser, viewAllUsers, editUserDetails, viewNewBookRequest, viewBookFeedback, viewLibraryServiceFeedback, automaticBookReturnExpiringNotification, deleteNewBookRequestDetails, deleteBookFeedback, deleteLibraryServiceFeedback, viewAllMemberShipRequest, deleteApprovedReturns, viewReturnedBookUserDetails, deleteReturnedBookDetails, viewReservedBooks, viewBooksProblems, deleteBookProblem, showExpiredMemberships, deleteExpiredMembership, deleteMissingBook, viewTime, adminEditUserProfileImage, editBookImage, deleteLibraryTime } = require("../Controller/adminController");
const { membership, viewMembershipCard, borrowBook, reserveBook, userRegister, userLogin, viewUserProfile, editUserProfile, renewBorrowingDueDate, logOutUser, searchBook, viewBorrowingDetails, viewReservedDetails, sendBookFeedback, sendLibraryFeedback, editUserProfileImage, addBookstowishlist, viewWishlistItems, deleteWishlistItem, changeHeartIconColor, getLoginDetail } = require("../Controller/userController");
const uploads = require("../Middleware/multer");
const { authentication, authorization } = require("../Middleware/authentication");
const {acceptRenewRequestandUpdateBorrowingDetails, sendNewBookRequest, fineRecieved, vewRenewalRequest, deleteAcceptedRenewalRequests } = require("../Controller/librarianController");

const router = express.Router();

router.route('/adduser').post(authentication,authorization('admin','librarian'),uploads.single('profileimage'),addUser);
router.route('/deleteperson/:id').delete(authentication,authorization('admin'),deletePerson);
router.route('/membership').post(authentication,authorization('user','librarian'),uploads.fields([{name:'file'},{name:'imageproof'}]),membership);
router.route('/viewmembership').get(authentication,authorization('admin','librarian'),viewAllMemberShipRequest);
router.route('/updatemembership/:id').put(updateMemberShip);
router.route('/addbook').post(authentication,authorization('admin','librarian'),uploads.single('bookimage'),addbook);
router.route('/editbook/:id').put(authentication,authorization('admin','librarian'),editBook);
router.route('/editbookimage/:id').put(authentication,authorization('admin','librarian'),uploads.single('bookimage'),editBookImage);
router.route('/deletebook/:id').delete(authentication,authorization('admin','librarian'),deleteBook);
router.route('/viewallbooks').get(viewAllBooks);
router.route('/viewmembershipcard').get(authentication,authorization('user'),viewMembershipCard);
router.route('/borrowbook').post(authentication,authorization('user','librarian'),borrowBook);
router.route('/viewborrowbooks').get(authentication,authorization('admin','librarian'),viewBorrowedBooks);
router.route('/reservebooks').post(authentication,authorization('user'),reserveBook);
router.route('/updateborrowingrequest/:id').put(authentication,authorization('admin','librarian'),approveBorrowingRequest);
router.route('/updatereservedrequest/:id').put(authentication,authorization('admin','librarian'),approveReservedRequest);
router.route('/deleteborroweddetails/:id').delete(authentication,authorization('admin','librarian'),deleteApprovedReturns);
router.route('/addbookproblem').post(authentication,authorization('admin','librarian'),manageInventory);
router.route('/orderbook').post(authentication,authorization('admin'),orderNewBooks);
router.route('/approvereturn/:id').put(authentication,authorization('admin','librarian'),approveReturn);
router.route('/cancelreservation/:id').delete(authentication,authorization('admin','librarian'),cancelReservation);
router.route('/viewreturneduserdetails').get(authentication,authorization('admin','librarian'),viewReturnedBookUserDetails);
router.route('/deletereturndbookdetails/:id').delete(authentication,authorization('admin','librarian'),deleteReturnedBookDetails)
router.route('/viewallreservedbooks').get(authentication,authorization('admin','librarian'),viewReservedBooks);
router.route('/viewbooksproblems').get(authentication,authorization('admin'),viewBooksProblems);
router.route('/deleteproblem/:id').delete(authentication,authorization('admin'),deleteBookProblem);
router.route('/membershipexpiredmembers').get(showExpiredMemberships);
router.route('/deleteexpiredmembership/:id').delete(authentication,authorization('admin','librarian'),deleteExpiredMembership);
router.route('/deletemissingbook/:id').delete(authentication,authorization('admin'),deleteMissingBook);
router.route('/viewtime').get(viewTime);
router.route('/viewrenewalbookrequests').get(vewRenewalRequest);
router.route('/membershipexpiringnotification/:id').post(authentication,authorization('admin','librarian'),sendMembershipExpiringNotification);
router.route('/returnexpiringnotification/:id').post(sendReturnDateExpiringNotification);
router.route('/mostborrowedbook').get(viewMostBorrowedBooks);
router.route('/mostreservedbook').get(authentication,authorization('admin','librarian'),viewMostReservedDemandedBook);
router.route('/unusedbook').get(authentication,authorization('admin','librarian'),viewUnusedBooks);
router.route('/viewtotalfineammount').get(authentication,authorization('admin','librarian'),viewTotalFineammount);
router.route('/addmissingbook').post(authentication,authorization('admin','librarian'),addMissingBook);
router.route('/viewmissingbook').get(authentication,authorization('admin'),viewMissingBook);
router.route('/librarytime').post(authentication,authorization('admin'),libraryTime);
router.route('/updatelibrarytime/:id').put(authentication,authorization('admin'),updateLibraryTime);
router.route('/sendbookfeedback').post(authentication,authorization('user'),sendBookFeedback);
router.route('/viewBookfeedback').get(authentication,authorization('admin','librarian'),viewBookFeedback);
router.route('/userregister').post(uploads.single('profileimage'),userRegister);
router.route('/userlogin').post(userLogin);
router.route('/viewallusers').get(authentication,authorization('admin'),viewAllUsers);
router.route('/viewuserprofile').get(authentication,authorization('user','librarian','admin'),viewUserProfile);
router.route('/edituserprofileimage').put(authentication,authorization('user','librarian','admin'),uploads.single('profileimage'),editUserProfileImage);
router.route('/edituserprofile').put(authentication,authorization('user','librarian','admin'),editUserProfile);   
router.route('/edituserdetails/:id').put(authentication,authorization('admin'),editUserDetails)
router.route('/adminedituserprofile/:id').put(authentication,authorization('admin'),uploads.single('profileimage'),adminEditUserProfileImage)

router.route('/renewborrowingdate').post(authentication,authorization('user'),renewBorrowingDueDate);
router.route('/renewborrowingdateupdation/:id').put(acceptRenewRequestandUpdateBorrowingDetails);
router.route('/sendnewbookrequest').post(authentication,authorization('librarian'),sendNewBookRequest);
router.route('/viewnewbookrequest').get(authentication,authorization('admin'),viewNewBookRequest);
router.route('/deletenewbookrequest/:id').delete(authentication,authorization('admin'),deleteNewBookRequestDetails);
router.route('/logoutuser').delete(authentication,logOutUser);
router.route('/finerecieved/:id').put(fineRecieved);
router.route('/searchbook/:val').get(searchBook);
router.route('/viewborrowdetails').get(authentication,authorization('user'),viewBorrowingDetails);
router.route('/viewreserveddetails').get(authentication,authorization('user'),viewReservedDetails);
router.route('/sendlibraryservicefeedback').post(sendLibraryFeedback);
router.route('/viewlibraryservicefeedback').get(authentication,authorization('admin','librarian'),viewLibraryServiceFeedback);
router.route('/automaticbookreturnexpiringnotification').get(automaticBookReturnExpiringNotification);
router.route('/deletebookfeedback/:id').delete(authentication,authorization('admin','librarian'),deleteBookFeedback);
router.route('/deletelibraryservicefeedback/:id').delete(authentication,authorization('admin','librarian'),deleteLibraryServiceFeedback);
router.route('/deleteacceptedrenewalrequests/:id').delete(authentication,authorization('admin','librarian'),deleteAcceptedRenewalRequests);
router.route('/wishlist').post(authentication,authorization('user'),addBookstowishlist);
router.route('/viewwishlistitems').get(authentication,authorization('user'),viewWishlistItems);
router.route('/deletewishlistitem/:name').delete(authentication,authorization('user'),deleteWishlistItem);
router.route('/changehearticoncolor').put(authentication,changeHeartIconColor);
router.route('/deletelibrarytime/:id').delete(deleteLibraryTime);
router.route('/getlogindetails').get(authentication,getLoginDetail);

module.exports = router;
